module recipereader;

import stdio local;
import stdlib local;
import string local;
import c2vector as vctr local;
import utils local;

public type target struct
{
    char* name;
    vector files;
}
public type readerstate enum
{
    START,
    INSIDE_TARGET
}

readerstate state = START;
char* currentname;
public func void handleLine(char* line) 
{
    if (line[0] == '#' || isws(line)) return; // skip comments
    char* lncpy = line;
    switch (state) {
    case START:
        {
            char* pch = strtok(recipetxt," ");
			while (pch != nil)
			{
				puts("----------");
				printf ("%s\n",pch);
				pch = strtok (nil, "\n");
			}
            // line should be 'TARGET <name>'
            const char* kw = get_token();
            if (strcmp(kw, "target") == 0) 
            {
                char* save;
                const char* target_name = get_token();
                if (target_name == 0) readerror("expected target name");
                recipes.push_back(current);
                state = INSIDE_TARGET;
            } 
            else if (strcmp(kw, "lib") == 0) 
            {
                state = INSIDE_TARGET;
            } 
            else 
            {
                readerror("expected keyword target|lib");
            }
        }
        break;
    case INSIDE_TARGET:
        {
            // line should be '<filename>' or 'end'
            const char* tok = get_token();
            if (tok[0] == '$') 
            {
                tok++;
                if (strcmp(tok, "config") == 0) 
                {
                    while (1) 
                    {
                        const char* tok2 = get_token();
                        if (!tok2) break;
                        // TODO check duplicate configs
                        current->addConfig(tok2);
                    }
                } 
                else if (strcmp(tok, "export") == 0) 
                {
                    while (1) 
                    {
                        const char* tok2 = get_token();
                        if (!tok2) break;
                        if (current->hasExported(tok2)) 
                        {
                            error("duplicate module '%s'", tok2);
                        }
                        current->addExported(tok2);
                    }
                } 
                else if (strcmp(tok, "generate-c") == 0) 
                {
                } 
                else if (strcmp(tok, "warnings") == 0) 
                {
                } 
                else if (strcmp(tok, "deps") == 0) 
                {
                } 
                else if (strcmp(tok, "refs") == 0) 
                {
                } 
                else 
                {
                }
            } 
            else if (strcmp(tok, "end") == 0) 
            {
                state = START;
            } 
            else 
            {
                current->addFile(tok);
            }
        }
        break;
    }
}

func void readerror(char* errmsg)
{
    printf("\x1B[31merror \x1B[37moccured while parsing recipe file:\n%s\n\x1B[0m", errmsg);
}